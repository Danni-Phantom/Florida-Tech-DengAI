from Modeling.Sim_Linear_Regression import *
from Modeling.Forecasting import *
from rpy2.robjects import pandas2ri
import unittest

import pandas

X = [123, 810, 186, 864, 811, 740, 429, 637, 555, 207, 415, 693, 962, 352, 90, 269, 453, 624, 771, 728, 944, 893,
     124, 377, 111, 422, 470, 7, 498, 250, 36, 172, 358, 569, 938, 617, 131, 417, 564, 462, 748, 621, 15, 878, 826,
     799, 220, 660, 497, 959, 752, 889, 591, 276, 827, 127, 982, 942, 600, 566, 347, 283, 264, 838, 459, 788, 658,
     829, 197, 375, 995, 1, 542, 745, 434, 187, 368, 618, 454, 456, 476, 237, 68, 628, 390, 490, 19, 6, 393, 991,
     308, 291, 512, 808, 978, 404, 143, 733, 793, 257, 782, 488, 610, 419, 274, 52, 946, 575, 138, 668, 10, 656,
     402, 673, 175, 519, 775, 653, 496, 141, 648, 139, 261, 553, 955, 102, 869, 666, 121, 492, 950, 852, 522, 236,
     687, 727, 58, 218, 795, 146, 270, 28, 158, 645, 992, 749, 20, 663, 632, 234, 483, 381, 814, 113, 675, 747,
     166, 677, 160, 828, 105, 354, 994, 394, 916, 939, 513, 336, 567, 561, 301, 3, 966, 444, 683, 764, 467, 148,
     902, 295, 856, 560, 81, 387, 790, 441, 190, 709, 750, 386, 184, 44, 348, 623, 106, 388, 414, 382, 14, 152,
     969, 306, 78, 599, 958, 378, 881, 413, 163, 642, 551, 5, 520, 149, 247, 436, 696, 140, 968, 475, 118, 288,
     208, 606, 214, 437, 586, 222, 472, 224, 41, 582, 130, 57, 171, 701, 73, 128, 399, 405, 225, 643, 973, 338,
     611, 431, 365, 526, 579, 16, 298, 233, 32, 620, 840, 587, 466, 180, 935, 324, 603, 536, 707, 122, 857, 879,
     357, 640, 708, 350, 783, 964, 713, 447, 74, 499, 559, 839, 767, 245, 63, 424, 821, 736, 506, 875, 147, 570,
     252, 199, 589, 144, 543, 685, 931, 114, 943, 101, 612, 263]

Y = [737, 311, 511, 156, 201, 423, 412, 134, 487, 609, 312, 300, 346, 971, 641, 581, 812, 872, 846, 706, 403, 178,
     986, 168, 432, 563, 235, 719, 638, 501, 251, 265, 646, 674, 285, 817, 936, 286, 196, 241, 960, 738, 530, 318,
     768, 169, 953, 136, 126, 997, 883, 374, 181, 544, 279, 926, 275, 494, 230, 310, 360, 366, 98, 558, 450, 246,
     457, 290, 691, 109, 489, 607, 154, 477, 27, 895, 282, 779, 548, 22, 588, 593, 439, 56, 509, 305, 711, 848,
     400, 223, 722, 930, 602, 69, 367, 524, 635, 550, 256, 71, 409, 294, 529, 905, 717, 97, 807, 392, 330, 212,
     598, 556, 631, 535, 647, 557, 322, 418, 25, 763, 704, 921, 682, 686, 531, 572, 903, 851, 554, 525, 720, 909,
     636, 681, 446, 963, 527, 651, 972, 825, 859, 830, 89, 867, 8, 24, 215, 370, 891, 443, 805, 753, 680, 485, 255,
     515, 744, 119, 240, 739, 725, 723, 151, 667, 204, 80, 359, 12, 442, 103, 342, 669, 961, 335, 296, 665, 238,
     268, 11, 690, 715, 319, 145, 538, 362, 594, 904, 355, 979, 759, 363, 491, 195, 202, 652, 331, 411, 451, 135,
     426, 361, 133, 469, 108, 907, 297, 433, 977, 292, 885, 438, 774, 150, 40, 120, 518, 899, 425, 85, 54, 523,
     115, 333, 778, 383, 61, 892, 919, 460, 625, 970, 480, 924, 688, 65, 380, 584, 980, 757, 541, 304, 267, 849,
     209, 816, 170, 841, 317, 75, 585, 364, 227, 95, 194, 88, 616, 516, 219, 315, 996, 410, 353, 262, 26, 705, 182,
     244, 908, 137, 580, 917, 662, 880, 870, 634, 2, 100, 167, 287, 619, 532, 644, 266, 21, 273, 159, 179, 941,
     574, 82, 313, 239, 806, 626, 862, 684, 539, 657, 614, 873]

NEWX = [888, 176, 819, 138, 717, 409, 597, 126, 596, 915, 281, 165, 749, 359, 428, 470, 731, 375, 244, 903, 996, 435,
        468, 253, 213]

TESTFEATURES = {
    'city': ['test'] * len(X),
    'year': X,
    'weekofyear': X,
    'week_start_date': X,
    'X': X
}

TESTLABELS = {
    'city': ['test'] * len(X),
    'year': Y,
    'weekofyear': Y,
    'total_cases': Y}

FORECASTTESTFEATURES = {
    'city': ['test'] * len(NEWX),
    'year': NEWX,
    'weekofyear': NEWX,
    'week_start_date': NEWX,
    'X': NEWX
}

TESTFEATURESDF = pandas.DataFrame(TESTFEATURES)
TESTLABELSDF = pandas.DataFrame(TESTLABELS)
FORECASTTESTFEATURESDF = pandas.DataFrame(FORECASTTESTFEATURES)


FORECASTTESTRESULTS = [444.43239, 513.46791, 451.12263, 517.15239, 461.01255, 490.87623, 472.64775, 518.31591,
                       472.74471, 441.81447,
                       503.28711, 514.53447, 457.90983, 495.72423, 489.03399, 484.96167, 459.65511, 494.17287,
                       506.87463, 442.97799,
                       433.96071, 488.35527, 485.15559, 506.00199, 509.88039]


class test_forecast(unittest.TestCase):

    def test_simple_forecast(self):
        predictor = robjects.r['unlist'](pandas2ri.py2ri(TESTFEATURESDF['X']))
        dependent_variable = robjects.r['unlist'](pandas2ri.py2ri(TESTLABELSDF['total_cases']))
        fit = simplelinearmodel(predictor, 'X', dependent_variable)
        fcast = forecast(fit, FORECASTTESTFEATURESDF)

        for i in range(0, len(FORECASTTESTRESULTS)):
            self.assertLess(abs(fcast[1][i] - round(FORECASTTESTRESULTS[i], 5)), .01)

    if __name__ == '__main__':
        unittest.main()
